// -*- C++ -*-
//
// Package:    HeterogeneousCore/MPIRecv
// Class:      MPIRecv
//
/**\class MPIRecv MPIRecv.cc HeterogeneousCore/MPIRecv/plugins/MPIRecv.cc

 Description: [one line class summary]

 Implementation:
     [Notes on implementation]
*/
//
// Original Author:  Fawaz M Sh Kh W Alazemi
//         Created:  Thu, 17 Nov 2022 09:50:39 GMT
//
//

// system include files
#include <memory>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/stream/EDProducer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "FWCore/Utilities/interface/StreamID.h"
#include "messages.h"
#include "HeterogeneousCore/MPICore/interface/MPIOrigin.h"
//
// class declaration
//
//
//

/******************
 * MPI Begin
 * Note: For testing purposes we assume Sender will try to find the received (which is lanuched manually at the moment)
 ******************/
#include<iostream>
#include<mpi.h>
#include "HeterogeneousCore/MPIServices/interface/MPIService.h"
#include "FWCore/ServiceRegistry/interface/Service.h"
#include<string> 
#include "HeterogeneousCore/MPICore/interface/MPICommunicator.h"
#include "FWCore/ParameterSet/interface/ConfigurationDescriptions.h"
#include "FWCore/ParameterSet/interface/ParameterSetDescription.h"
#include "FWCore/ParameterSet/interface/ParameterSetDescriptionFiller.h"
#include "DataFormats/Provenance/interface/ProcessHistory.h"
#include "DataFormats/Provenance/interface/ProcessHistoryRegistry.h"
#include "DataFormats/Provenance/interface/BranchListIndex.h"
#include "DataFormats/Provenance/interface/EventAuxiliary.h"
#include "DataFormats/Provenance/interface/EventSelectionID.h"
#include "DataFormats/Provenance/interface/EventToProcessBlockIndexes.h"
#include "DataFormats/Provenance/interface/LuminosityBlockAuxiliary.h"


#include <TBuffer.h>
#include <TBufferFile.h>
#include <TClass.h>
#include <deque>
#include <memory>

/******************
 * MPI end
 ******************/



namespace {
  // create a branch description for the MPIOrigin object
  edm::BranchDescription makeOriginBranchDescription(edm::ModuleDescription const& md) {
    static const auto type = edm::TypeWithDict(typeid(MPIOrigin));
    edm::BranchDescription desc(edm::InEvent,         // branch type
                                md.moduleLabel(),     // producer module label
                                md.processName(),     // process name
                                "MPIOrigin",          // class name
                                "MPIOrigin",          // friendly class name
                                "",                   // product instance label
                                md.moduleName(),      // producer module name (C++ type)
                                md.parameterSetID(),  // parameter set id of the producer
                                type);                // product type
    return desc;
  }
}  // namespace


class MPIRecv : public edm::stream::EDProducer<> {
public:
  explicit MPIRecv(const edm::ParameterSet&);
  ~MPIRecv() override;

  static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);

private:
  void beginStream(edm::StreamID) override;
  void produce(edm::Event&, const edm::EventSetup&) override;
  void endStream() override;

  //void beginRun(edm::Run const&, edm::EventSetup const&) override;
  //void endRun(edm::Run const&, edm::EventSetup const&) override;
  //void beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&) override;
  //void endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&) override;

  // ----------member data ---------------------------
  edm::EDGetTokenT<MPIToken> token_; 
};

//
// constants, enums and typedefs
//

//
// static data member definitions
//

//
// constructors and destructor
//
MPIRecv::MPIRecv(const edm::ParameterSet& iConfig):token_{consumes(iConfig.getParameter<edm::InputTag>("controller"))} {
  //register your products
  /* Examples
  produces<ExampleData2>();

  //if do put with a label
  produces<ExampleData2>("label");
 
  //if you want to put into the Run
  produces<ExampleData2,InRun>();
  */
  //now do what ever other initialization is needed
}

MPIRecv::~MPIRecv() {
  // do anything here that needs to be done at destruction time
  // (e.g. close files, deallocate resources etc.)
  //
  // please remove this method altogether if it would be left empty


}

//
// member functions
//

// ------------ method called to produce the data  ------------
void MPIRecv::produce(edm::Event& iEvent, const edm::EventSetup& iSetup) {
  using namespace edm;
  /* This is an event example
  //Read 'ExampleData' from the Event
  ExampleData const& in = iEvent.get(inToken_);

  //Use the ExampleData to create an ExampleData2 which 
  // is put into the Event
  iEvent.put(std::make_unique<ExampleData2>(in));
  */

  /* this is an EventSetup example
  //Read SetupData from the SetupRecord in the EventSetup
  SetupData& setup = iSetup.getData(setupToken_);
  */
 

  //****************** MPI Begin *****************
  const MPICommunicator* communicator = iEvent.get(token_).token;   
  MPI_Comm comm_ = communicator->getCommunicator() ; 
  EDM_MPI_Empty_t buffer;
  MPI_Status status ; 
  MPI_Recv(&buffer, 1, EDM_MPI_Empty, MPI_ANY_SOURCE, EDM_MPI_Connect, comm_, &status);
  edm::LogAbsolute("MPI") << "connected from " << status.MPI_SOURCE;
  // receive the branch descriptions
  MPI_Message message;

  int source = status.MPI_SOURCE;

  while (true) {
    MPI_Mprobe(source, MPI_ANY_TAG, comm_, &message, &status);
    if (status.MPI_TAG == EDM_MPI_SendComplete) {
      // all branches have been received
      MPI_Mrecv(&buffer, 1, EDM_MPI_Empty, &message, &status);
      edm::LogAbsolute("MPI") << "all BranchDescription received";
      break;
    } else {
      // receive the branch description for the next event product
      assert(EDM_MPI_SendSerializedProduct == status.MPI_TAG);
      int size;
      MPI_Get_count(&status, MPI_BYTE, &size);
      TBufferFile blob{TBuffer::kRead, size};
      MPI_Mrecv(blob.Buffer(), size, MPI_BYTE, &message, &status);
      edm::BranchDescription bd;
      TClass::GetClass(typeid(edm::BranchDescription))->ReadBuffer(blob, &bd);
      bd.setDropped(false);
      bd.setProduced(false);
      bd.setOnDemand(false);
      bd.setIsProvenanceSetOnRead(true);
      bd.init();
      //FIXME 
      //productRegistryUpdate().copyProduct(bd);
    }
  }
  edm::LogAbsolute("MPI") << "registered branchess:\n";
  /*
   * FIXME
  for (auto& keyval : productRegistry()->productList()) {
    edm::LogAbsolute("MPI") << "  - " << keyval.first;
  }
  */
  edm::LogAbsolute("MPI") << '\n';
 



  for (auto& product : iEvent.eventProducts) {
    eventPrincipal.put(*product.uranchDescription, std::move(product.product), product.provenance);
  }








   //already declared above
   //MPI_Message message;
      while (true) {
        MPI_Mprobe(source, MPI_ANY_TAG, comm_, &message, &status);
        if (EDM_MPI_SendComplete == status.MPI_TAG) {
          // all products have been received
          EDM_MPI_Empty_t buffer;
          MPI_Mrecv(&buffer, 1, EDM_MPI_Empty, &message, &status);
          edm::LogAbsolute("MPI") << "all Products received";
          break;
        } else {
          edm::BranchKey key;
          edm::ProductProvenance provenance;
          edm::ProductID pid;
          edm::WrapperBase* wrapper;
          {
            // receive the BranchKey
            assert(EDM_MPI_SendSerializedProduct == status.MPI_TAG);
            int size;
            MPI_Get_count(&status, MPI_BYTE, &size);
            TBufferFile buffer{TBuffer::kRead, size};
            MPI_Mrecv(buffer.Buffer(), size, MPI_BYTE, &message, &status);
            TClass::GetClass(typeid(edm::BranchKey))->ReadBuffer(buffer, &key);
          }

          edm::BranchDescription const& branch = productRegistry()->productList().at(key);
	   MPI_Mprobe(source, MPI_ANY_TAG, comm_, &message, &status);
          {
            // receive the ProductProvenance
            assert(EDM_MPI_SendSerializedProduct == status.MPI_TAG);
            int size;
            MPI_Get_count(&status, MPI_BYTE, &size);
            TBufferFile buffer{TBuffer::kRead, size};
            MPI_Mrecv(buffer.Buffer(), size, MPI_BYTE, &message, &status);
            TClass::GetClass(typeid(edm::ProductProvenance))->ReadBuffer(buffer, &provenance);
          }
          MPI_Mprobe(source, MPI_ANY_TAG, comm_, &message, &status);
          {
            // receive the ProductID
            assert(EDM_MPI_SendSerializedProduct == status.MPI_TAG);
            int size;
            MPI_Get_count(&status, MPI_BYTE, &size);
            TBufferFile buffer{TBuffer::kRead, size};
            MPI_Mrecv(buffer.Buffer(), size, MPI_BYTE, &message, &status);
            TClass::GetClass(typeid(edm::ProductID))->ReadBuffer(buffer, &pid);
          }
          MPI_Mprobe(source, MPI_ANY_TAG, comm_, &message, &status);
          {
            // receive the product
            assert(EDM_MPI_SendSerializedProduct == status.MPI_TAG);
            int size;
            MPI_Get_count(&status, MPI_BYTE, &size);
            TBufferFile buffer{TBuffer::kRead, size};
            MPI_Mrecv(buffer.Buffer(), size, MPI_BYTE, &message, &status);
            // construct an edm::Wrapper<T> and fill it with the received product
            // TODO this would be much simpler if the MPIDriver could sent the Wrapper<T> instead of T
            edm::TypeWithDict const& type = branch.wrappedType();
            edm::ObjectWithDict object = type.construct();
            *reinterpret_cast<bool*>(reinterpret_cast<char*>(object.address()) +
                                     type.dataMemberByName("present").offset()) = true;
            branch.unwrappedType().getClass()->ReadBuffer(
                buffer, reinterpret_cast<char*>(object.address()) + type.dataMemberByName("obj").offset());
            wrapper = reinterpret_cast<edm::WrapperBase*>(object.address());
          }
          edm::LogAbsolute("MPI") << "received object for branch " << key;
          //edm::LogAbsolute("MPI") << "received object of type " << branch.unwrappedType();

          // store the received product
          iEvent.eventProducts.emplace_back(std::unique_ptr<edm::WrapperBase>(wrapper), &branch, provenance);
        }
      }














  /*
  MPI_Status status;
  MPI_Probe(MPI_ANY_SOURCE, MPI_ANY_TAG, communicator->getCommunicator(), &status);
  int msg_size; 
  MPI_Get_count(&status, MPI_BYTE, &msg_size);
  char data[msg_size];
  MPI_Recv(data, msg_size, MPI_BYTE, MPI_ANY_SOURCE, MPI_ANY_TAG, communicator->getCommunicator(), MPI_STATUS_IGNORE);
  std::cout<<"*********************  RECV: Receiver got the message:\n >>>>>>>>>>>>>>>>>>>>>>>>> "<<data<<"\n";
  */
  //****************** MPI END ******************


}

// ------------ method called once each stream before processing any runs, lumis or events  ------------
void MPIRecv::beginStream(edm::StreamID) {
  // please remove this method if not needed
}

// ------------ method called once each stream after processing all runs, lumis and events  ------------
void MPIRecv::endStream() {
  // please remove this method if not needed
}

// ------------ method called when starting to processes a run  ------------
/*
void
MPIRecv::beginRun(edm::Run const&, edm::EventSetup const&)
{
}
*/

// ------------ method called when ending the processing of a run  ------------
/*
void
MPIRecv::endRun(edm::Run const&, edm::EventSetup const&)
{
}
*/

// ------------ method called when starting to processes a luminosity block  ------------
/*
void
MPIRecv::beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{
}
*/

// ------------ method called when ending the processing of a luminosity block  ------------
/*
void
MPIRecv::endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{
}
*/

// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
void MPIRecv::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
  //The following says we do not know what parameters are allowed so do no validation
  // Please change this to state exactly what you do use, even if it is no parameters
  edm::ParameterSetDescription desc;
  desc.setUnknown();
  descriptions.addDefault(desc);
}

//define this as a plug-in
DEFINE_FWK_MODULE(MPIRecv);
